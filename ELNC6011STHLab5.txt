/*-----------------------------------------------------------------------------
	File Name:	ELNC6011STHLab5.c  
	Author:		Syed Tafazul Hassan
	Date:		14/11/2023
	Modified:	Name & date or None
	Â© Fanshawe College, 2023

	Description:Sample ADC readings every 1 second,taking the average of 10
				collected samples then converting it to its physical values,
				and updating the information on the PC via serial communication(UART1).
				To adjust the upper and lower limits of the sensors, use pushbutton buttons.
				button 1: toggels between HIGH and LOW limitControl
				button 2: changes the SENSORS 0 -> TEMP,1 -> HUMD, 2 -> CO2
				button 3: Increment the Limit by 1
				button 4: Decrement the Limit by 1
				Adjusting the VENT positions depending on the LIMITS of control defined
				for the SENSORS and also provide live status updates via serial communication(UART1)
				and sends Command statement via UART2 with baudrate of 19200bits/sec 
-----------------------------------------------------------------------------*/

/* Preprocessor ---------------------------------------------------------------
   Hardware Configuration Bits ----------------------------------------------*/
#pragma config FOSC		= INTIO67
#pragma config PLLCFG	= OFF
#pragma config PRICLKEN = ON
#pragma config FCMEN	= OFF
#pragma config IESO		= OFF
#pragma config PWRTEN	= OFF 
#pragma config BOREN	= ON
#pragma config BORV		= 285 
#pragma config WDTEN	= OFF
#pragma config PBADEN	= OFF
#pragma config LVP		= OFF
#pragma config MCLRE	= EXTMCLR

// Libraries ------------------------------------------------------------------
#include <p18f45k22.h>
#include <stdio.h>
#include <stdlib.h>
#include <usart.h>
// Constants  -----------------------------------------------------------------
#define TRUE	1	
#define FALSE	0
#define OFF     FALSE
#define ON		TRUE	
#define TMR0PSC			0x3CB0 
#define TMR0IFLAG		INTCONbits.TMR0IF
#define BYTE			8
#define SAMPLESIZE		10
#define NOOFSENSORS		3
#define SENSORS			3
#define ONESEC			10
#define ADCRES			0.00488 //v/bit
#define TEMP 			0
#define HUMD			1
#define CO2				2
#define TEMPB			0.5
#define TEMPM			0.01
#define HUMDM			0.05
#define CO2M			0.00034782

//Push button
#define MODE			0xE0
#define PBPORT			PORTA
#define PBMASK			0xF0
#define PBREAD			(PBPORT & PBMASK)
#define CHANSEL			0xD0
#define INC				0xB0
#define	DEC				0x70

//Stepper
#define STEPPERPORT		LATB
#define STEPPERMASK		0x0F
#define STEPPER			(STEPPERPORT & STEPPERMASK)
#define NOPRESS			0xF0
#define STEPDEGREE		3
#define PATTERNCOUNT	4

//Status
#define LIGHTING  LATCbits.LATC0
#define COOLER	  LATCbits.LATC1
#define HEATER    LATCbits.LATC2
#define FAN 	  LATCbits.LATC3
#define SPKLR     LATCbits.LATC4

//Communication

#define FIVESECS 5
#define MYADDY 006
#define BUFSIZE 40
#define CONTROLLER 1
// Global Variables  ----------------------------------------------------------

typedef int sensor_t;
typedef char flag_t;

char stepperpattern[PATTERNCOUNT] = {0x01,0x02,0x04,0x08};
char buffer[BUFSIZE];

typedef struct
{
	flag_t limitChange;
	flag_t sentenceRdy;
	char dispTime;
}sysEvent_t;

typedef struct
{
	char currentPattern;
	char patternCounter;
	char currentPosition;
	char setPosition;
	flag_t isMoving;

}stepper_t;

typedef struct
{
	char channelSel;
	char mode;
	char pbState;
	char lastState;
}pbs_t;

typedef struct
{
	sensor_t samples[SAMPLESIZE];
	float average;
	sensor_t upperLimit;
	sensor_t lowerLimit;
	sensor_t insertPoint;
	flag_t	 avgRdy;

}sensorCh_t;

stepper_t vent;
pbs_t pbIns;
sensorCh_t sensors[SENSORS];
sysEvent_t eventFlags;
// Functions  -----------------------------------------------------------------
/*>>> calcCheckSum: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		14/11/2023
Modified:	None
Desc:		
Input: 		None
Returns:	None
 ----------------------------------------------------------------------------*/
char calcCheckSum(char *ptr)
{
	char calChecksum=0;
	while(*ptr)
	{
		calChecksum ^= *ptr;
		ptr++;
	}

	return calChecksum;
}

/*>>> take_a_step: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		14/11/2023
Modified:	None
Desc:		changing the positions of VENT by comparing it with setPosition and
			currentPosition. if setPosition is less then currentPosition
			motor runs in counter clock wise direction else it will run in clockwise 
			direction and updating STEPPERPORT to change the direction
			of motor
Input: 		None
Returns:	None
 ----------------------------------------------------------------------------*/
void take_a_step(void)
{

	if(vent.currentPosition != vent.setPosition)
	{
		if(vent.currentPosition < vent.setPosition)
		{
			vent.patternCounter++;
			if(vent.patternCounter >= PATTERNCOUNT)
			{
				vent.patternCounter = 0;
			}
			vent.currentPosition += STEPDEGREE;
		}
		
		else
		{
			vent.patternCounter--;
			if(vent.patternCounter < 0)
			{
				vent.patternCounter = (PATTERNCOUNT - 1);
			}
			vent.currentPosition -= STEPDEGREE;
		}

		vent.currentPattern = stepperpattern[vent.patternCounter];
		STEPPERPORT = vent.currentPattern;

	}//eo if

} // eo take_a_step::

/*>>> initPushButtonDS: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		12/09/2023
Modified:	Name & date or None
Desc:		Initialize the pbs_t data structure with default values
Input: 		none
Returns:	none
 ----------------------------------------------------------------------------*/
void initPushButtonDS(void)
{
	pbIns.channelSel = 0;
	pbIns.mode = FALSE;
	pbIns.pbState = 0;
	pbIns.lastState = 0xF0;

} // eo initPushButtonDS::



/*>>> initStepperDS: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		12/09/2023
Modified:	Name & date or None
Desc:		Initialize the stepper_t data structure with default values
Input: 		none
Returns:	none
 ----------------------------------------------------------------------------*/
void initStepperDS(void)
{
	vent.currentPattern = 0x01;
	vent.patternCounter = 0;
	vent.currentPosition = 0;
	vent.setPosition = 0;
	vent.isMoving = FALSE;

} // eo initStepperDS::

/*>>> initDSsensorCh: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		12/09/2023
Modified:	Name & date or None
Desc:		Initialize the sensor_t data structure with default values
Input: 		int chID, pass the chID to initialise the DataStructure array
					0 -> TEMP
					1 -> HUMD
					2 -> CO2
Returns:	None
 ----------------------------------------------------------------------------*/
void initDSsensorCh(int chID)
{
	int index = 0;
	for(index=0;index<SAMPLESIZE;index++)
	{
		sensors[chID].samples[index] = 0;
	}
	sensors[chID].average = 0;
	sensors[chID].insertPoint = 0;
	sensors[chID].avgRdy = FALSE;


	switch(chID)
	{
		case TEMP:
			sensors[chID].upperLimit = 35;
			sensors[chID].lowerLimit = 15;
			break;

		case HUMD:
			sensors[chID].upperLimit = 60;
			sensors[chID].lowerLimit = 40;
			break;

		case CO2:
			sensors[chID].upperLimit = 1200;
			sensors[chID].lowerLimit = 800;
			break;

		default:
			break;
	}

	
} // eo initDSsensorCh::

/*>>> initsysEventFlagDS: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		19/11/2023
Modified:	Name & date or None
Desc:		Initialize the sysEvent_t data structure with default values
Input: 		none
Returns:	none
 ----------------------------------------------------------------------------*/
void initsysEventFlagDS(void)
{
	eventFlags.limitChange = FALSE;
	eventFlags.sentenceRdy = FALSE;
	eventFlags.dispTime = 10;
	

} // eo initsysEventFlagDS::
/*>>> setOscillation: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Author:		Syed Tafazul Hassan
Date:		26/07/2023
Modified:	Name & date or None
Desc:		Initialise the Oscillator at 4MHz and stay there until it reaches stable
		frequency
Input: 		None
Returns:	None
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
void setOscillation(void)
{
	
	OSCCON = 0x53;
	OSCCON2 = 0x04;
	OSCTUNE = 0x80;
	
	while(OSCCONbits.HFIOFS != TRUE);
	

}// eo setOscillation::

/*>>> portsInit: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Author:		Syed Tafazul Hassan
Date:		26/07/2023
Modified:	None
Desc:		configuring ADC on PORTA
			pin0 -> TEMP sensor
			pin1 -> HUMD sensor
			pin3 -> CO2	 sensor
			
			Configuring Digital input on PORTA upper nibble for pushbutton
			
			configuring PORTB lower nibble as Digital output for STEPPER motor

			PORTC pin 6, pin 7
			is configured for Tx,Rx for UART1,

			PORTC (pin0 - pin4) are configured as digital output
				  pin0 -> LIGHTNING
				  pin1 -> COOLER
				  pin2 -> HEATER
				  pin3 -> FAN
				  pin4 -> SPKLR
				  
			unsued PORT pins is configured as Digital Input
Input: 		None
Returns:	None
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
void portsInit(void)
{
	LATA = 0x00;
	TRISA = 0xFF;
	ANSELA = 0x07;

	LATB = 0x00;
	TRISB = 0xF0;
	ANSELB = 0x00;
	
	LATC = 0x00;
	TRISC = 0xE0;
	ANSELC = 0x00;

	LATD = 0x00;
	TRISD = 0xEB;
	ANSELD = 0x00;

	LATE = 0x00;
	TRISE = 0xFF;
	ANSELE = 0x00;


}// eo portsInit::

/*>>> adcInit: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Author:		Syed Tafazul Hassan
Date:		26/07/2023
Modified:	Name & date or None
Desc:		configured the ADC module with 12tad, fosc/8, right justified
			and enabled adc module
Input: 		None
Returns:	None
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
void adcInit(void)
{
	
	ADCON0 = 0x01;
	ADCON1 = 0x00;
	ADCON2 = 0xA9;

}// eo adcInit::

/*>>> adc_ContinousConversion: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Author:		Syed Tafazul Hassan
Date:		26/07/2023
Modified:	Name & date or None
Desc:		Can read any ADC channel by passing the channel number.
Input: 		char chID, pass the channel number to read raw data.
Returns:	sensor_t, returns the raw ADC data (right justified).
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
sensor_t adc_ContinousConversion(char chID)
{
	
	ADCON0bits.CHS = chID;
	ADCON0bits.GO = TRUE;
	while(ADCON0bits.GO);
	return ADRES;
	
	
}// eo adc_ContinousConversion::

/*>>> timer0Init: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Author:		Syed Tafazul Hassan
Date:		26/07/2023
Modified:	Name & date or None
Desc:		Configured the TIMER 0 at 16bit mode with 100msec cycle
Input: 		None
Returns:	None
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
void timer0Init(void)
{
	
	T0CON = 0x80;
	TMR0H = (TMR0PSC >> BYTE);
	TMR0L = TMR0PSC;
	

}// eo timer0Init::


/*>>> reset_TMR0: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Author:		Syed Tafazul Hassan
Date:		26/07/2023
Modified:	Name & date or None
Desc:		Resetting the interrupt flag to FALSE and reloading the PSC after
			timer rollover 
Input: 		None
Returns:	None
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
void reset_TMR0(void)
{
	TMR0IFLAG = FALSE;
	TMR0H = (TMR0PSC >> BYTE);
	TMR0L = (TMR0PSC);

}//eo reset_TMR0::

/*>>> initUART1: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Author:		Syed Tafazul Hassan
Date:		12/09/2023
Modified:	none
Desc:		Initialising UART1 at baudrate of 9600bits/sec 
Input: 		none
Returns:	None
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
void initUART1(void)
{
	
	SPBRG1 = 25;
	TXSTA1 = 0x24;
	RCSTA1 = 0x90;
	BAUDCON1 = 0x00;
}

/*>>> initUART2: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Author:		Syed Tafazul Hassan
Date:		12/09/2023
Modified:	none
Desc:		Initialising UART2 at baudrate of 19200bits/sec 
Input: 		none
Returns:	None
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
void initUART2(void)
{
	SPBRG2 = 12;
	TXSTA2 = 0x26;
	RCSTA2 = 0x90;
	BAUDCON2 = 0x00;

	
}

/*>>> toggleMode: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		03/10/2023
Modified:	None
Desc:		Toggle the MODE between upperLimit(HIGH) and lowerLimit(LOW) on 
			the press of the button 1
Input: 		None
			
Returns:	None
 ----------------------------------------------------------------------------*/
void toggleMode(void)
{
	pbIns.mode = !pbIns.mode;
} // eo toggleMode::

/*>>> changeChn: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		03/10/2023
Modified:	None
Desc:		Select any SENSORS channel on the press of the button (2)
			CHANSEL from 
				 0 -> TEMP
				 1 -> HUMD
				 2 -> CO2
Input: 		None
			
Returns:	None
 ----------------------------------------------------------------------------*/
void changeChn(void)
{
	pbIns.channelSel++;
	if(pbIns.channelSel >= SENSORS)
	{
		pbIns.channelSel = 0;
	}
} // eo changeChn::

/*>>> IncLimit: -----------------------------------------------------------
Author:		syed tafazul hassan
Date:		03/10/2023
Modified:	None
Desc:Increment the sensors upperLimit or lowerLimit by 1 on the press
			of the button 3 based on MODE
			
Input: 		None
			
Returns:	None
 ----------------------------------------------------------------------------*/
void IncLimit(void)
{
	eventFlags.limitChange = TRUE;
	if(pbIns.mode)
	{
		sensors[pbIns.channelSel].upperLimit++;
	}
	else
	{
		sensors[pbIns.channelSel].lowerLimit++;
	}
} // eo IncLimit::

/*>>> DecLimit: -----------------------------------------------------------
Author:		syed tafazul hassan
Date:		03/10/2023
Modified:	None
Desc:		Decrement the sensors upperLimit or lowerLimit by 1 on the press
			of the button 4 based on MODE
Input: 		None
			
Returns:	None
 ----------------------------------------------------------------------------*/
void DecLimit(void)
{
	eventFlags.limitChange = TRUE;
	if(pbIns.mode)
	{
		sensors[pbIns.channelSel].upperLimit--;

	}
	else
	{
		sensors[pbIns.channelSel].lowerLimit--;

	}
} // eo DecLimit::

/*>>> generateSentence: -----------------------------------------------------------
Author:		syed tafazul hassan
Date:		03/10/2023
Modified:	None
Desc:		If UpperLimit or LowerLimit has been changed it will generate a 
			commmand sentece and calculate checksum and add it in the end of 
			the sentence, the command sentence is stored in buffer array
	
			$CONLIM,CONTROLLER,MYADDY,channelSel,upperLimit/lowerLimit,Checksum 
Input: 		None
			
Returns:	None
 ----------------------------------------------------------------------------*/
void generateSentence(void)
{
	if(eventFlags.limitChange)
	{
		eventFlags.limitChange = FALSE;
		eventFlags.dispTime = 0;
		eventFlags.sentenceRdy = TRUE;

		if(pbIns.mode)
		{
			sprintf(buffer,"$CONLIM,%i,%i,%i,H,%i",CONTROLLER,MYADDY,pbIns.channelSel,
					sensors[pbIns.channelSel].upperLimit);


		}

		else
		{
			sprintf(buffer,"$CONLIM,%i,%i,%i,L,%i",CONTROLLER,MYADDY,pbIns.channelSel,
					sensors[pbIns.channelSel].lowerLimit);


		}

		sprintf(buffer,"%s,%i\r",buffer,calcCheckSum(&buffer));
		puts2USART(buffer);
	}

}// eo generateSentence::

/*>>> changeSensorsLimit: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		03/10/2023
Modified:	None
Desc:		Reading the pushbutton from PORTA uppernibble then deciding the mode
			of operation.
			button 1 -> MODE
			button 2 -> CHANSEL
			button 3 -> INC
			button 4 -> DEC
			
Input: 		None
			
Returns:	None
 ----------------------------------------------------------------------------*/
void changeSensorsLimit(void)
{
	pbIns.pbState = PBREAD;
	if(pbIns.pbState != pbIns.lastState && pbIns.pbState != NOPRESS )
	{
		pbIns.lastState = pbIns.pbState;
		switch(pbIns.pbState)
		{
			case MODE:
				toggleMode();
				break;

			case CHANSEL:
				changeChn();
				break;

			case INC:
				IncLimit();
				break;

			case DEC:
				DecLimit();
				break;

			default:
				break;

		}//eo switch
		generateSentence();
	}//eo pbIns check

	else if(pbIns.pbState == NOPRESS)
	{
		pbIns.lastState = NOPRESS;
	}


} // eo changeSensorsLimit::

/*>>> systemlimitControl: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		03/10/2023
Modified:	None
Desc:		checking and controlling the output pheriphreals by comparing the sensors average
			value with upperLimit and lowerLimit and taking the action depending on
			the situation
Input: 		None
Returns:	None
 ----------------------------------------------------------------------------*/
void systemlimitControl()
{
	char chID = 0;
	for(chID = 0; chID < SENSORS; chID++)
	{
		if(sensors[chID].avgRdy)
		{
			LIGHTING = ON;
			switch(chID)
			{
				case TEMP:

					if(sensors[chID].average > sensors[chID].upperLimit)
					{
						COOLER = ON;
						HEATER = OFF;
						FAN = ON;
						vent.setPosition = 90;
					}
					
					else if(sensors[chID].average < sensors[chID].lowerLimit)
					{
						HEATER = ON;
						FAN = ON;
						COOLER = OFF;
						vent.setPosition = 6;
					}

					else
					{
						HEATER = OFF;
						COOLER = OFF;
						FAN = OFF;
					}

					break;

				case HUMD:

					if(sensors[chID].average > sensors[chID].upperLimit)
					{
						SPKLR = OFF;
						vent.setPosition = 66;
					}
					
					else if(sensors[chID].average < sensors[chID].lowerLimit)
					{
						SPKLR = ON;
						vent.setPosition = 12;
					}

					else
					{
						SPKLR = OFF;
						
					}
					break;

				case CO2:

					if(sensors[chID].average > sensors[chID].upperLimit)
					{
						FAN = ON;
						vent.setPosition = 9;
					}
					
					else if(sensors[chID].average < sensors[chID].lowerLimit)
					{
						vent.setPosition = 90;
						FAN = ON;
					}

					break;

				default:
					break;
			}
		}//eo if
	}//eo for
} // eo systemlimitControl::


/*>>> updateScreen: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		03/10/2023
Modified:	None
Desc:prints the live TEMP, HUMD, and CO2 data and upperLimit & lowerLimit
			of sensors.Provides information about MODE & chID to help 
			change the upperLimit and lowerLimit of sensors, Additionaly it
			also provide live status of the system on console
Input: 		None
Returns:	None
 ----------------------------------------------------------------------------*/
void updateScreen(char chID)
{
	printf("\033[2J \033[H");
	printf("Greenhouse Controller System <006> \n\n\r");
	if(!pbIns.mode)
	{
		printf("Channel:%i Mode:LOW\n\n\r",pbIns.channelSel);
	}
	else
	{
		printf("Channel:%i Mode:HIGH\n\n\r",pbIns.channelSel);
	}
	printf("\rTemp: %3i%cC  Humd: %3i%% CO2: %8i ppm \n\n\r",(int)sensors[0].average,248,(int)sensors[1].average,(int)sensors[2].average);
	printf("\rHL: %3i%cC    HL: %3i%%   HL: %8i ppm  \n\n\r",(int)sensors[0].upperLimit,248,(int)sensors[1].upperLimit,(int)sensors[2].upperLimit);
	printf("\rLL: %3i%cC    LL: %3i%%   LL: %8i ppm  \n\n\r",(int)sensors[0].lowerLimit,248,(int)sensors[1].lowerLimit,(int)sensors[2].lowerLimit);

	printf("\n\n\r");
	if(HEATER)
	{
		printf("\rHeat: ON");
	}
	else
	{
		printf("\rHeat: OFF");
	}
	
	if(COOLER)
	{
		printf("\tCool: ON");
	}
	
	else
	{
		printf("\tCool: OFF");
	}

	if(FAN)
	{
		printf("\tFan: ON");
	}
	else
	{
		printf("\tFan: OFF");
	}

	if(SPKLR)
	{
		printf("\n\rSPKLR: ON");	
	}
	else
	{
		printf("\n\rSPKLR: OFF");
	}

	printf("\tLights: ON");
	
	printf("\n\n\r");			
	printf("Vent\n\rSet Position:%3i%cC\t\tCurrent Position:%3i%cC\n\rData Pattern:0x0%i",vent.setPosition,248,vent.currentPosition,248,STEPPER);
	printf("\n\n\r");	

} // eo updateScreen::

/*>>> samplingAverageConvPhyValue: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		03/10/2023
Modified:	None
Desc:		Read the ADC channels (TEMP, HUMD, CO2) and performing averaing of 10 read
			samples. Then converting the avergaed values to voltage and back to 
			physical values.
Input: 		None.
Returns:	None.
 ----------------------------------------------------------------------------*/
void samplingAverageConvPhyValue(void)
{

	char chID = 0;

	for(chID = 0; chID<SENSORS; chID++)
	{
		sensors[chID].samples[sensors[chID].insertPoint] = adc_ContinousConversion(chID);
		sensors[chID].insertPoint++;
		
		if(sensors[chID].insertPoint >= SAMPLESIZE)
		{
			sensors[chID].insertPoint = 0;
			sensors[chID].avgRdy = TRUE;
		}
		
		if(sensors[chID].avgRdy)
		{
		
			int index = 0;
			long sum = 0;
			
			for(index=0;index<SAMPLESIZE;index++)
			{
			
				sum += sensors[chID].samples[index];
			}
			
			sensors[chID].average = sum/SAMPLESIZE;

			// Converting the digital values to Physical values
			switch(chID)
			{
				case TEMP:
					sensors[chID].average = sensors[chID].average * ADCRES;
					sensors[chID].average -= TEMPB;
					sensors[chID].average /= TEMPM;
					break;
	
				case HUMD:
					sensors[chID].average = sensors[chID].average * ADCRES;
					sensors[chID].average /= HUMDM;
					break;
	
				case CO2:
					sensors[chID].average = sensors[chID].average * ADCRES;
					sensors[chID].average /= CO2M;
					break;

			}//eo switch

		}// eo Avgerage

		

	}//eo multi channel
	
	updateScreen(chID);
	
} // eo samplingAverageConvPhyValue::

/*>>> systemInit: >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Author:		Syed Tafazul Hassan
Date:		26/07/2023
Modified:	Name & date or None
Desc:		initialise the required pheripherals
Input: 		None
Returns:	None
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/
void systemInit(void)
{
	
	setOscillation();
	portsInit();	
	adcInit();
	timer0Init();
	initUART1();
	initUART2();



}// eo systemInit::

/*--- MAIN: FUNCTION ----------------------------------------------------------
 ----------------------------------------------------------------------------*/
void main( void )
{
	int chID = 0;
	char rolloverCount = 0;
	char fiveSecCount = 0;
	systemInit();

	for(chID = 0; chID < SENSORS; chID++)
	{
		initDSsensorCh(chID);
	}
	
	initStepperDS(); 		// initializing the stepper motor data structure
	initPushButtonDS();		//// initializing the pushbutton data structure
	initsysEventFlagDS();
	while(1)
	{
		

		if(TMR0IFLAG == TRUE)
		{
			reset_TMR0();
			take_a_step();	
			changeSensorsLimit(); 
			rolloverCount++;
			
			if(rolloverCount >= ONESEC)
			{
				rolloverCount = 0;
				samplingAverageConvPhyValue();
				systemlimitControl();
				eventFlags.dispTime++;
			}


		}//eo Time
		
	}//eo while loop

} // eo main::




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> mbed >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

/* mbed Microcontroller Library
 * Copyright (c) 2019 ARM Limited
 * SPDX-License-Identifier: Apache-2.0
 */

#include "mbed.h"
#include "string.h"

// Blinking rate in milliseconds
#define BLINKING_RATE     500ms
#define BUFSIZE             35
#define TOKENSIZE           10
#define CMDSTM 0
#define ADDYTO 2
#define ADDYFM 1
#define CHANID 3
#define LIMIT  4
#define NEWVAL 5
#define MYADDY 6
#define CONTROLLER 1
#define SENSORS 3
#define STAT    "CONLIM"
#define BUFFSIZE 100
typedef char flag_t;
typedef int sensor_t;

typedef struct
{
	
	float average;
	sensor_t upperLimit;
	sensor_t lowerLimit;


}sensorCh_t;

sensorCh_t sensors[SENSORS];
UnbufferedSerial pic(p9,p10,19200);
UnbufferedSerial pc(USBTX,USBRX);

char *tokens[TOKENSIZE];
char rcBuffer[BUFSIZE];
char *rcptr = rcBuffer;
char buf[BUFFSIZE];
flag_t sentenceRdy = false;


/*>>> initDSsensorCh: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		29/11/2023
Modified:	Name & date or None
Desc:		Initialize the sensors data structure with default values
Input: 		None
		
Returns:	None
 ----------------------------------------------------------------------------*/

void initDSsensorCh(void)
{

    for (int chID =0; chID < SENSORS ; chID++)
    {
        sensors[chID].average = 0;
	sensors[chID].upperLimit = 0;
	sensors[chID].lowerLimit = 0;
    }
	
		

	
} // eo initDSsensorCh::

/*>>> getByte: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		28/11/2023
Modified:	Name & date or None
Desc:		After receving UART Rx interrupt it will receive a single byte of
		data and store in the rcBuffer, If the received byte is '$' then 
		the rcptr points to base address and if the received byte is '\r'
		then it will make sentenceRdy flag True
Input: 		None
Returns:	None
 ----------------------------------------------------------------------------*/
void getByte(void)
{
    char hold = 0xFF;
    if(pic.readable())
    {
        pic.read(&hold,1);
        if(hold=='$')
        {
            rcptr = rcBuffer;
        }

        else if(hold == '\r')
        {
            sentenceRdy = true;
            hold = '\0';
        }

        *rcptr = hold;
        rcptr++;
    }
}//eo getByte::

/*>>> calChecksum: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		28/11/2023
Modified:	Name & date or None
Desc:		Calculate the checksum for the string passed as an arguments and
		return the calculated Checksum
Input: 		char *ptr, pass the string for which checksum need to be calculated
Returns:	char calChecksum, returns calculated check sum
 ----------------------------------------------------------------------------*/
char calChecksum(char *ptr)
{
    char calChecksum = 0;
    while(*ptr)
    {
        calChecksum ^= *ptr;
        ptr++;
    }

    return calChecksum;
}//eo calChecksum::

/*>>> validate: -------------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		28/11/2023
Modified:	Name & date or None
Desc:		validates the received command statement by calculating 
		checksum and comparing it to received Checksum.
Input: 		char *ptr: pass the address of the string  
Returns:	char : true or false based on the Checksum comaprison
 ----------------------------------------------------------------------------*/

char validate(char *ptr)
{
    int count = strlen(ptr);
    char rcs = 0, hcs = 0;
    flag_t CSFlag = true;

    while(CSFlag)
    {
        if(*(ptr+count) == ',')
        {
            *(ptr+count)=0;
            rcs = atoi(ptr+count+1);
            CSFlag = false;
        }
        count--;
    }
    hcs = calChecksum(ptr);
    if(rcs == hcs)
    {
        return true;
    }

    else
    {
        return false;

    }


}//eo validate::

/*>>> parseSent: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		28/11/2023
Modified:	Name & date or None
Desc:		validate the received commmand statement and spliting from ','
		 and '$',it into mini strings
Input: 		char *ptr: pass the address of the string
Returns:	None
 ----------------------------------------------------------------------------*/
void parseSent(char *ptr)
{
    
    int tokenCount = 0;
    while(*ptr)
    {
        if(*ptr == '$' || *ptr == ',')
        {
            *ptr = 0x00;
            tokens[tokenCount] = (ptr + 1);
            tokenCount++;
        }

        ptr++;
    }


}//eo parseSent::


/*>>> updateScreen: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		28/11/2023
Modified:	Name & date or None
Desc:		prints the sensorsCh_t information on the console
Input: 		None
Returns:	None
 ----------------------------------------------------------------------------*/
void updateScreen(void)
{
	
	printf("\033[2J \033[H");
        printf("\rTemp: %3i%cC  Humd: %3i%% CO2: %8i ppm \n\n\r",(int)sensors[0].average,248,(int)sensors[1].average,(int)sensors[2].average);
	printf("\rHL: %3i%cC    HL: %3i%%   HL: %8i ppm  \n\n\r",(int)sensors[0].upperLimit,248,(int)sensors[1].upperLimit,(int)sensors[2].upperLimit);
	printf("\rLL: %3i%cC    LL: %3i%%   LL: %8i ppm  \n\n\r",(int)sensors[0].lowerLimit,248,(int)sensors[1].lowerLimit,(int)sensors[2].lowerLimit);

}//eo updateScreen::


/*>>> executeSent: -----------------------------------------------------------
Author:		Syed Tafazul Hassan
Date:		28/11/2023
Modified:	Name & date or None
Desc:		Checks the address ADDYTO and MYADDY and ADDYFM to CONTROLLER
		if command statement is for MYAADY and ADDYFM is same as CONTROLLER
		it will update the sensors Limits of sensorCh_t structure and calls the 
		update screen function
Input: 		None
Returns:	None
 ----------------------------------------------------------------------------*/
void executeSent(void)
{

    if(atoi(tokens[ADDYTO]) == MYADDY)
    {
        if(atoi(tokens[ADDYFM]) == CONTROLLER)
        {
		
	    if((strcmp(STAT,tokens[CMDSTM])) == 0)
    	     {
       	     	if(*tokens[LIMIT] == 'H')
        	{
            		sensors[atoi(tokens[CHANID])].upperLimit = atoi(tokens[NEWVAL]);
            
        	}

        	else if(*tokens[LIMIT] == 'L')
        	{
            		sensors[atoi(tokens[CHANID])].lowerLimit = atoi(tokens[NEWVAL]);
            
        	}
    	     }
	     updateScreen();

        }
    }
}//eo executeSent::



int main()
{
    pic.attach(&getByte);
    // Initialise the digital pin LED1 as an output

    initDSsensorCh();
    while (true) 
    {
        if(sentenceRdy)
        {
            sentenceRdy = false;
            if(validate(rcBuffer))
            {
                parseSent(rcBuffer);
                executeSent();
            }
        }
        
    }
}//eo main::
